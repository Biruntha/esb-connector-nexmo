<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<template name="textToSpeech" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="to" description="The phone number of the recipient."/>
    <parameter name="from" description="The phone number of the sender."/>
    <parameter name="text" description="The text message."/>
    <parameter name="language" description="The language used to read the message."/>
    <parameter name="voice" description="The voice type."/>
    <parameter name="repeat" description="The number of time that the message repeat."/>
    <parameter name="machineDetection" description="How to behave when an answering."/>
    <parameter name="machineTimeout"
               description="The time allocated to analyze if the call has been answered by a machine."/>
    <parameter name="callback"
               description="The URL to which Nexmo will send a request when the call ends to notify your application."/>
    <parameter name="callbackMethod" description="The HTTP method for your callback."/>
    <sequence>
        <property name="uri.var.to" expression="$func:to"/>
        <property name="uri.var.from" expression="$func:from"/>
        <property name="uri.var.text" expression="$func:text"/>
        <property name="uri.var.language" expression="$func:language"/>
        <property name="uri.var.voice" expression="$func:voice"/>
        <property name="uri.var.repeat" expression="$func:repeat"/>
        <property name="uri.var.machineDetection" expression="$func:machineDetection"/>
        <property name="uri.var.machineTimeout" expression="$func:machineTimeout"/>
        <property name="uri.var.callback" expression="$func:callback"/>
        <property name="uri.var.callbackMethod" expression="$func:callbackMethod"/>
        <property name="uri.var.optParams" value=""/>
        <!--Construct url parameters for optional parameters -->
        <script language="js">
            <![CDATA[
				var optParams = mc.getProperty('uri.var.optParams');
				var from = mc.getProperty("uri.var.from");
                var language = mc.getProperty("uri.var.language");
                var voice = mc.getProperty("uri.var.voice");
                var repeat = mc.getProperty("uri.var.repeat");
                var machineDetection = mc.getProperty("uri.var.machineDetection");
                var machineTimeout = mc.getProperty("uri.var.machineTimeout");
                var callback = mc.getProperty("uri.var.callback");
                var callbackMethod = mc.getProperty("uri.var.callbackMethod");
                var url = mc.getProperty("uri.var.apiUrl");
                if ( from != null && from != "") {
                	optParams = optParams + "&from=" + from;
                }
                if ( language != null && language != "") {
                    optParams = optParams + "&lg=" + language;
                }
                if ( voice != null && voice != "") {
                    optParams = optParams + "&voice=" + voice;
                }
                if ( repeat != null && repeat != "") {
                    optParams = optParams + "&repeat=" + repeat;
                }
                if ( machineDetection != null && machineDetection != "") {
                    optParams = optParams + "&machine_detection=" + machineDetection;
                }
                if ( machineTimeout != null && machineTimeout != "") {
                    optParams = optParams + "&machine_timeout=" + machineTimeout;
                }
                if ( callback != null && callback != "") {
                	optParams = optParams + "&callback=" + callback;
                }
                if ( callbackMethod != null && callbackMethod != "") {
                    optParams = optParams + "&callback_method=" + callbackMethod;
                }
                mc.setProperty('uri.var.optParams', optParams);
                mc.setProperty('host', url.replace("https://", ""));
			]]>
        </script>
        <!-- If the responseType type is not XML, set the default value to JSON -->
        <filter source="get-property('uri.var.responseType')" regex="xml">
            <then>
                <property name="uri.var.apiUrl" expression="fn:concat(get-property('uri.var.apiUrl'), '/tts/xml')"/>
            </then>
            <else>
                <property name="uri.var.apiUrl" expression="fn:concat(get-property('uri.var.apiUrl'), '/tts/json')"/>
            </else>
        </filter>
        <header name="Content-Type" value="application/x-www-form-urlencoded" scope="transport"/>
        <property name="POST_TO_URI" scope="axis2" value="true"/>
        <property name="REQUEST_HOST_HEADER" expression="get-property('host')" scope="axis2"/>
        <call>
            <endpoint>
                <http method="get" uri-template="legacy-encoding:{uri.var.apiUrl}{uri.var.authParams}&amp;to={uri.var.to}&amp;text={uri.var.text}{uri.var.optParams}"/>
            </endpoint>
        </call>
        <!-- Remove custom header information in response -->
        <header name="Strict-Transport-Security" scope="transport" action="remove"/>
        <header name="X-Frame-Options" scope="transport" action="remove"/>
        <header name="X-XSS-Protection" scope="transport" action="remove"/>
    </sequence>
</template>